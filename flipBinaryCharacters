/*You are given a binary string (i.e. with characters 0 and 1) S consisting of characters S 1 , S 2 , …,
S N . In a single operation, you can choose two indices L and R such that 1 ≤ L ≤ R ≤ N and flip
the characters S L , S L+1 , …, S R . By flipping, we mean change character 0 to 1 and vice-versa.


Your aim is to perform ATMOST one operation such that in final string number of 1s is
maximized. If you don’t want to perform the operation, return an empty array. Else, return an
array consisting of two elements denoting L and R. If there are multiple solutions, return the
lexicographically smallest pair of L and R.*/


#include<stdio.h>
#include<string.h>
void flipBinary(char str[]){
    int i, j, len=strlen(str), l, r, max=0, one=0;
    for(i=0; str[i]!='\0'; i++)
        if(str[i]=='0')
            break;
    if(i==len){
        printf("Empty string");
        return;
    }
    for(i=0; i<len; i++){
        one = 0;
        for(j=i; j<len; j++){
            if(str[j] == '0')
            one++;
            else one--;
            if(one > max){
                l = i+1;
                r = j+1;
                max = one;
            }
        }
    }
    printf("%d %d",l,r);
}
int main(){
    char str[50];
    scanf("%s",str);
    flipBinary(str);
    return 0;
}
